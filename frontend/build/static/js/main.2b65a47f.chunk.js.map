{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","window","location","replace","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAmEeA,E,iLAxBX,OAHAC,OAAOC,SAASC,QACd,+DAEK,S,GALOC,aC1BEC,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2b65a47f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// import Landing from \"./pages/landing\";\n// import Register from \"./pages/register\";\n// import Login from \"./pages/login\";\n// import InitialPref from \"./pages/initialpref\";\n// import Main from \"./pages/main\";\n// import Details from \"./pages/details\";\n// import PageNotFound from \"./pages/404\";\n// import UpdateUser from \"./pages/updateUser\";\n// import { Provider } from \"react-redux\";\n// import store from \"./redux/store\";\n// import jwtDecode from \"jwt-decode\";\n// import { signoutUser, getUser } from \"./redux/actions/userActions\";\n// import axios from \"axios\";\n// import AuthenticatedRoute from \"./components/main/AuthenticatedRoute\";\n// import UnauthenticatedRoute from \"./components/main/UnauthenticatedRoute\";\n\n// // see if user is logged in when app is first launched\n// // or when browser is refreshed by checking the token stored in localStorage\n// let token = localStorage.token;\n// if (token) {\n//   const decodedToken = jwtDecode(token);\n//   if (decodedToken.exp * 1000 < Date.now()) {\n//     // if there's no valid token, remove all user info from state\n//     store.dispatch(signoutUser());\n//     window.location.href = \"/login\";\n//   } else {\n//     // else, get user info\n//     store.dispatch({ type: \"SET_AUTHENTICATED\" });\n//     axios.defaults.headers.common[\"Authorization\"] = token;\n//     store.dispatch(getUser());\n//   }\n// }\n\n// AuthenticatedRoute : only allow authenticated user, otherwise redirect to login page (ex. main, details, etc)\n// UnauthenticatedRoute : redirect to main page if user is authenticated (ex. login, register, etc)\nclass App extends Component {\n  render() {\n    window.location.replace(\n      \"https://github.com/Project-MKB/project-mkb/tree/dev/backend\"\n    );\n    return null;\n    // return (\n    //   <Provider store={store}>\n    //     <Router>\n    //       <Switch>\n    //         <Route exact path=\"/\" component={Landing} />\n    //         <UnauthenticatedRoute exact path=\"/register\" component={Register} />\n    //         <UnauthenticatedRoute exact path=\"/login\" component={Login} />\n    //         <Route exact path=\"/onboarding\" component={InitialPref} />\n    //         <Route exact path=\"/main\" component={Main} />\n    //         <Route exact path=\"/details\" component={Details} />\n    //         <AuthenticatedRoute\n    //           exact\n    //           path=\"/user/update\"\n    //           component={UpdateUser}\n    //         />\n    //         <Route path=\"/\" component={PageNotFound} />\n    //       </Switch>\n    //     </Router>\n    //   </Provider>\n    // );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}